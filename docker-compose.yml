services:
  postgres:
    image: postgres:17.6
    restart: always
    container_name: n8n-postgres
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./docker_postgres/pgdata:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - n8n-net

  redis:
    image: redis:7-alpine
    restart: always
    container_name: n8n-redis
    command:
      - redis-server                               # binário do servidor Redis
      - --requirepass
      - ${REDIS_PASSWORD}                          # senha obrigatória p/ conexões (ACL básica)
      - --appendonly
      - "yes"                                      # habilita AOF (persistência append-only)
      - --appendfsync
      - everysec                                   # fsync a cada ~1s (equilíbrio durabilidade x desempenho)
      - --auto-aof-rewrite-percentage
      - "100"                                      # dispara rewrite quando AOF dobrar de tamanho
      - --auto-aof-rewrite-min-size
      - 64mb                                       # só reescreve se tiver pelo menos 64MB (evita rewrites pequenos)
      - --save
      - "900 1"                                    # RDB: 1 mudança em 15min gera snapshot
      - --save
      - "300 10"                                   # RDB: 10 mudanças em 5min gera snapshot
      - --save
      - "60 10000"                                 # RDB: 10000 mudanças em 1min gera snapshot
      - --rdbcompression
      - "yes"                                      # comprime snapshots RDB (menor espaço em disco)
      - --aof-use-rdb-preamble
      - "yes"                                      # AOF híbrido: inicia com RDB + incrementos (startup mais rápida)
      - --dir
      - /data                                      # diretório dos arquivos de persistência
      - --dbfilename
      - dump.rdb                                   # nome do arquivo RDB
      - --appendfilename
      - appendonly.aof                             # nome base do AOF (no Redis 7 vira manifest + partes)
    environment:
      - REDIS_USER=${REDIS_USER}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data                           # volume persistente p/ RDB/AOF
    networks:
      - n8n-net


  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: n8n-redis-admin
    restart: always
    environment:
      - REDIS_HOSTS=local:redis:6379:0:${REDIS_PASSWORD}
      - HTTP_USER=${RC_HTTP_USER}          # <-- NOVO: usuário para a UI
      - HTTP_PASSWORD=${RC_HTTP_PASSWORD}  # <-- NOVO: senha para a UI
      # Opcional: usar hash bcrypt em vez de senha pura
      # - HTTP_PASSWORD_HASH=${RC_HTTP_PASSWORD_HASH}
      # Opcional: reduzir dados sensíveis nos logs
      - NO_LOG_DATA=true
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - n8n-net

  n8n-cloud:
    build:
      context: ./docker
      dockerfile: Dockerfile
    image: n8n-cloud-custom:latest
    restart: always
    container_name: n8n-cloud
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://127.0.0.1:5678/healthz/readiness >/dev/null 2>&1 || exit 1"]
      interval: 30s
      timeout: 5s
      start_period: 40s
      retries: 5
    environment:
      # ==== Code Node (JS): liberar built-ins e externos ====
      NODE_FUNCTION_ALLOW_BUILTIN: ${NODE_FUNCTION_ALLOW_BUILTIN}
      NODE_FUNCTION_ALLOW_EXTERNAL: ${NODE_FUNCTION_ALLOW_EXTERNAL}

      # ==== n8n ====
      N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY}
      N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS: ${N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS}
      OFFLOAD_MANUAL_EXECUTIONS_TO_WORKERS: ${OFFLOAD_MANUAL_EXECUTIONS_TO_WORKERS}
      N8N_BLOCK_ENV_ACCESS_IN_NODE: ${N8N_BLOCK_ENV_ACCESS_IN_NODE}
      N8N_RUNNERS_ENABLED: ${N8N_RUNNERS_ENABLED}
      N8N_EXECUTIONS_PROCESS: ${N8N_EXECUTIONS_PROCESS}
      N8N_CONCURRENCY_PRODUCTION_LIMIT: ${N8N_CONCURRENCY_PRODUCTION_LIMIT}
      N8N_PUSH_BACKEND: ${N8N_PUSH_BACKEND}
      N8N_BASIC_AUTH_ACTIVE: ${N8N_BASIC_AUTH_ACTIVE}
      N8N_SECURE_COOKIE: ${N8N_SECURE_COOKIE}
      N8N_BASIC_AUTH_USER: ${N8N_BASIC_AUTH_USER}
      N8N_BASIC_AUTH_PASSWORD: ${N8N_BASIC_AUTH_PASSWORD}
      N8N_HOST: ${N8N_HOST}
      N8N_PORT: ${N8N_PORT}
      N8N_PROTOCOL: ${N8N_PROTOCOL}
      N8N_TEMPLATES_ENABLED: ${N8N_TEMPLATES_ENABLED}
      N8N_DIAGNOSTICS_ENABLED: ${N8N_DIAGNOSTICS_ENABLED}
      N8N_HIRING_BANNER_ENABLED: ${N8N_HIRING_BANNER_ENABLED}
      WEBHOOK_URL: ${WEBHOOK_URL}

      # ==== Banco do n8n (Postgres) ====
      DB_TYPE: ${DB_TYPE}
      DB_POSTGRESDB_DATABASE: ${DB_POSTGRESDB_DATABASE}
      DB_POSTGRESDB_HOST: ${DB_POSTGRESDB_HOST}
      DB_POSTGRESDB_PORT: ${DB_POSTGRESDB_PORT}
      DB_POSTGRESDB_USER: ${DB_POSTGRESDB_USER}
      DB_POSTGRESDB_SCHEMA: ${DB_POSTGRESDB_SCHEMA}
      DB_POSTGRESDB_PASSWORD: ${DB_POSTGRESDB_PASSWORD}

      # ==== Fila (Redis) ====
      EXECUTIONS_MODE: ${EXECUTIONS_MODE}
      QUEUE_BULL_REDIS_HOST: ${QUEUE_BULL_REDIS_HOST}
      QUEUE_BULL_REDIS_PORT: ${QUEUE_BULL_REDIS_PORT}
      QUEUE_BULL_REDIS_DB: ${QUEUE_BULL_REDIS_DB}
      QUEUE_BULL_REDIS_USERNAME: ${REDIS_USER}
      QUEUE_BULL_REDIS_PASSWORD: ${REDIS_PASSWORD}

      # ==== TZ ====
      GENERIC_TIMEZONE: ${GENERIC_TIMEZONE}
      TZ: ${TZ}

    ports:
      - "5678:5678"
    volumes:
      - data:/home/node/.n8n
      - ./scripts/:/data/scripts/
      - ./credential/:/data/credential/
      - ./workflow/:/data/workflow/
    depends_on:
      - postgres
      - redis
    networks:
      - n8n-net

  n8n-worker:
    image: n8n-cloud-custom:latest
    restart: always
    container_name: n8n-worker
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -h ${QUEUE_BULL_REDIS_HOST} -p ${QUEUE_BULL_REDIS_PORT} --user ${REDIS_USER:-default} -a ${REDIS_PASSWORD} PING | grep -q PONG"]
      interval: 30s
      timeout: 5s
      start_period: 30s
      retries: 5
    depends_on:
      - postgres
      - redis
    environment:
      # ===== Replicar as mesmas variáveis do n8n-cloud que são de DB/Redis/TZ =====
      DB_TYPE: ${DB_TYPE}
      DB_POSTGRESDB_DATABASE: ${DB_POSTGRESDB_DATABASE}
      DB_POSTGRESDB_HOST: ${DB_POSTGRESDB_HOST}
      DB_POSTGRESDB_PORT: ${DB_POSTGRESDB_PORT}
      DB_POSTGRESDB_USER: ${DB_POSTGRESDB_USER}
      DB_POSTGRESDB_SCHEMA: ${DB_POSTGRESDB_SCHEMA}
      DB_POSTGRESDB_PASSWORD: ${DB_POSTGRESDB_PASSWORD}
      N8N_RUNNERS_ENABLED: ${N8N_RUNNERS_ENABLED}
      N8N_BLOCK_ENV_ACCESS_IN_NODE: ${N8N_BLOCK_ENV_ACCESS_IN_NODE}

      EXECUTIONS_MODE: ${EXECUTIONS_MODE}
      QUEUE_BULL_REDIS_HOST: ${QUEUE_BULL_REDIS_HOST}
      QUEUE_BULL_REDIS_PORT: ${QUEUE_BULL_REDIS_PORT}
      QUEUE_BULL_REDIS_DB: ${QUEUE_BULL_REDIS_DB}
      QUEUE_BULL_REDIS_USERNAME: ${REDIS_USER}
      QUEUE_BULL_REDIS_PASSWORD: ${REDIS_PASSWORD}

      GENERIC_TIMEZONE: ${GENERIC_TIMEZONE}
      TZ: ${TZ}

      N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS: ${N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS}
      OFFLOAD_MANUAL_EXECUTIONS_TO_WORKERS: ${OFFLOAD_MANUAL_EXECUTIONS_TO_WORKERS}
      N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY}
      NODE_FUNCTION_ALLOW_BUILTIN: ${NODE_FUNCTION_ALLOW_BUILTIN}
      NODE_FUNCTION_ALLOW_EXTERNAL: ${NODE_FUNCTION_ALLOW_EXTERNAL}
    command: ["worker","--concurrency=20"]
    networks:
      - n8n-net
    volumes:
      - ./scripts/:/data/scripts/
      - ./credential/:/data/credential/
      - ./workflow/:/data/workflow/


volumes:
  data:
  redis-data:   # <-- novo volume para o Redis

networks:
  n8n-net:
    driver: bridge
